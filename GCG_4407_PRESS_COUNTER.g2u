Program.Sub.ScreenSU.Start
Gui.SS_Form1..create
Gui.SS_Form1..caption("Press Counter")
Gui.SS_Form1..size(20805,12765)
Gui.SS_Form1..position(0,0)
Gui.SS_Form1..forecolor(0)
Gui.SS_Form1..BackColor(-2147483634)
Gui.SS_Form1..maxbutton(False)
Gui.SS_Form1..minbutton(False)
Gui.SS_Form1..mousepointer(11)
Gui.SS_Form1..sizeable(False)
Gui.SS_Form1..MinX(0)
Gui.SS_Form1..MinY(0)
Gui.SS_Form1..Event(Resize,SS_Form1_Resize)
Gui.SS_Form1..Event(UnLoad,SS_Form1_UnLoad)
Gui.SS_Form1..ControlBox(False)
Gui.SS_Form1.lbl_JobInfo.create(label,"00000 - 000 - 000000",True,9660,1050,1,375,8685,True,0,Arial,40,-2147483634,0)
Gui.SS_Form1.lbl_JobInfo.tabstop(True)
Gui.SS_Form1.lbl_JobInfo.tabindex(1)
Gui.SS_Form1.lbl_JobInfo.ForeColor(-2147483635)
Gui.SS_Form1.lbl_CurrentCount.create(label,"000000",True,9465,2400,1,10230,9420,True,0,Arial,120,-2147483634,0)
Gui.SS_Form1.lbl_CurrentCount.tabstop(True)
Gui.SS_Form1.lbl_CurrentCount.tabindex(2)
Gui.SS_Form1.cmdOk.create(button)
Gui.SS_Form1.cmdOk.Caption("Ok")
Gui.SS_Form1.cmdOk.size(1005,360)
Gui.SS_Form1.cmdOk.position(255,12240)
Gui.SS_Form1.cmdOk.tabstop(True)
Gui.SS_Form1.cmdOk.tabindex(3)
Gui.SS_Form1.cmdOk.Visible(False)
Gui.SS_Form1.lbl1.Create(Label,"Work Order",True,3045,570,1,150,8100,True,0,"Arial",24,-2147483634,0)
Gui.SS_Form1.lbl2.Create(Label,"Est. Footage:",True,2640,600,0,375,9750,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl_Footage.Create(Label,"000000",True,3210,600,0,4020,9750,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl3.Create(Label,"Actual Footage:",True,1890,1785,1,8235,10035,True,0,"Arial",20,-2147483634,0)
Gui.SS_Form1.lbl4.Create(Label,"Total Footage:",True,3180,600,0,375,10980,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl_Total.Create(Label,"000000",True,2325,600,0,4020,10980,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl5.Create(Label,"Amount Issued:",True,3390,600,0,375,10365,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl5.FontStyle(True,False,False,False,False)
Gui.SS_Form1.lbl5.ForeColor(6053069)
Gui.SS_Form1.lbl_Issued.Create(Label,"000000",True,2745,600,0,4020,10365,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl_Issued.FontStyle(True,False,False,False,False)
Gui.SS_Form1.lbl_Issued.ForeColor(6053069)
Gui.SS_Form1.timer1.Create(Timer)
Gui.SS_Form1.timer1.Size(495,495)
Gui.SS_Form1.timer1.Position(1650,12165)
Gui.SS_Form1.timer1.Interval(19000)
Gui.SS_Form1.timer1.Event(Timer,timer1_Timer)
Gui.SS_Form1.lbl6.Create(Label,"Return Footage:",True,3390,600,0,375,11595,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.lbl_return.Create(Label,"000000",True,2325,600,0,4020,11595,True,0,"Arial",18,-2147483628,0)
Gui.SS_Form1.frameSpeed.Create(Frame)
Gui.SS_Form1.frameSpeed.Size(20550,135)
Gui.SS_Form1.frameSpeed.Position(15,7755)
Gui.SS_Form1.frameSpeed.BackColor(-2147483628)
Gui.SS_Form1.frameSpeed.Anchor(15)
Gui.SS_Form1.frameSpeed.Zorder(1)
Gui.SS_Form1.lblCurrent.Create(Label,"000",True,20190,8280,-1,30,-1395,True,0,"Arial",450,-2147483634,0)
Gui.SS_Form1.lblCurrent.Anchor(15)
Gui.SS_Form2..create
Gui.SS_Form2..caption("Select Com Port")
Gui.SS_Form2..size(2250,1250)
Gui.SS_Form2..position(0,0)
Gui.SS_Form2..forecolor(0)
Gui.SS_Form2..BackColor(-2147483633)
Gui.SS_Form2..maxbutton(False)
Gui.SS_Form2..minbutton(False)
Gui.SS_Form2..mousepointer(0)
Gui.SS_Form2..sizeable(False)
Gui.SS_Form2..MinX(0)
Gui.SS_Form2..MinY(0)
Gui.SS_Form2.lbl_txtComPort.create(label,"Enter Com Port# and Press Enter",True,1800,200,1,100,135,True,0,Arial,8,-2147483633,0)
Gui.SS_Form2.lbl_txtComPort.LabelStretch(True)
Gui.SS_Form2.txtComPort.create(textbox,"",True,1800,330,1,100,335,True,0,Arial,8,16777215,1)
Gui.Form_Speed..Create
Gui.Form_Speed..Caption("Press Speed")
Gui.Form_Speed..Size(20595,13140)
Gui.Form_Speed..MinX(0)
Gui.Form_Speed..MinY(0)
Gui.Form_Speed..Position(0,0)
Gui.Form_Speed..BackColor(16777215)
Gui.Form_Speed..MousePointer(0)
Gui.Form_Speed..Event(Resize,Form_Speed_Resize)
Gui.Form_Speed..Event(UnLoad,Form_Speed_UnLoad)
Gui.Form_Speed.lblCurrent2.Create(Label,"000",True,20310,10260,2,-75,1650,True,0,"Arial",425,16777215,0)
Gui.Form_Speed.lblCurrent2.Anchor(0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Variable.Global.bIsRunning.Declare(Boolean,False)
v.Global.sJob.declare(String)
v.Global.sSuff.declare(String)
v.Global.sSeq.declare(String)
v.Global.sWC.declare(String)
v.Global.sEmp.declare(String)
v.Global.sCurrentDataFile.Declare(String)
v.Global.sStartFile.Declare(String)
v.Global.sStopFile.Declare(String)
v.Global.sResetFile.Declare(String)
v.Global.iCommID.Declare(Long)
v.Global.sComPortFile.Declare(String)
V.Global.sPIDFile.Declare(String)
V.Global.sAnswerFile.Declare(String)
v.Global.iID.Declare(Long)
v.Global.dStart.Declare(Date)
v.Global.dNow.Declare(Date)
v.Global.dThen.Declare(Date)
v.Global.iCount_Then.Declare(Long)
v.Global.iCount_Now.Declare(Long)

'not sure if we will use this variable is for keeping time
v.Global.dLastCommandProcessed.Declare(Date)
v.Global.bStarted.Declare(Boolean)
Variable.Global.fTotalFTG.Declare(Float,0)
Variable.Global.fissued.Declare(Float,0)
Variable.Global.sRM_Part.Declare(String)

Program.Sub.Preflight.End

Program.Sub.Main.Start
'Coded by: Silas
'2/7/2017
'Machine Integration via Serial Com Port + PLC
 'Getting Linear Feet and calculating Good Pieces.
'This only works for single jobs on a workcenter and employee has to clock in and out.
'Workcenter GUIs that use this program have to contain the word "PRESS" in the description, or else this will NOT run.
'For this program, 1 GUI = 1 WC always for Presses on the shop floor, and also the Serial Port is directly connected from GUI Terminal to PLC via Serial_Over_USB.

v.Local.iTimer.Declare(Float)
v.Local.sData.Declare(String)
v.Local.bExists.Declare(Boolean)
v.Local.fTotalFTG.Declare(Float)
v.Local.sSql.Declare(String)
v.Local.iSpd.Declare(Float)
v.Local.iRet.Declare(Long)
v.Local.fSpd.Declare(Float)
v.Local.fSpdTime.Declare(Float)
v.local.fIssued.Declare(float)

f.Intrinsic.Control.UnBlockEvents


'rename script 3
'f.Intrinsic.Control.If(v.Caller.Hook,=,15710)
'	v.Passed.000021.Set("Speedometer")
'	f.Intrinsic.Control.End

'f.Intrinsic.Control.EndIf
'f.Intrinsic.Control.If(v.caller.Terminal,=,761)
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'f.Intrinsic.Control.EndIf
'if Scan hook for Job, then set GLobal Variable as J. This hook only fires when it is a Work Order scan with prefix $%. Employee Scans are %$
f.Intrinsic.Control.If(v.Caller.Hook,=,15754)
	'set global passed variable to control post scan hook only when it is a JOB
	v.Passed.global.Set("J")
	f.Intrinsic.Control.End
f.Intrinsic.Control.ElseIf(v.Caller.Hook,=,15753) 
	v.Passed.global.Set("")
	f.Intrinsic.Control.End
f.Intrinsic.Control.Endif

'open connection
f.ODBC.Connection!conx.OpenConnection(v.Ambient.PDSN,v.Ambient.PUser,v.Ambient.PPass,72000)
Gui.SS_Form1.timer1.Enabled(True)

'When launching the Linear Feet per Minute Display -- this form is intended to be maximized on an extra monitor mounted by the GUI.
' this is meant to run consistently.
'f.Intrinsic.Control.If(v.Caller.Hook,=,15780)
'	
''	gui.Form_Speed..Show
''	f.Intrinsic.Control.Do
''		'get the avg speed based off terminal
'''		f.Intrinsic.String.Build("Select LFM_AVG from GCG_4407_PRESS_SPD where TERMINAL_WC = '{0}'",v.Caller.Terminal,v.Local.sSql)
'''		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.iRet)
'''		gui.Form_Speed.lblAvg.Caption(v.local.iRet)
''		
''		'get the current speed based off terminal
'''		f.Intrinsic.String.Build("Select LFM_SPEED from GCG_4407_PRESS_SPD where TERMINAL_WC = '{0}'",v.Caller.Terminal,v.Local.sSql)
'''		f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.iRet)
'''		gui.Form_Speed.lblCurrent2.Caption(v.Local.iRet.String)
''		
''	f.Intrinsic.Control.Loop	
'	
'	'should never hit this but just in case.
'	f.Intrinsic.Control.End
'f.Intrinsic.Control.EndIf


'Get GUI passed information
f.Intrinsic.Control.CallSub(setpassedvars)

'Set file names being used for terminal.
f.Intrinsic.Control.CallSub(SetFQPs)

'Check Workcenter, make sure it is a Press in our table and Configured.
f.Intrinsic.Control.CallSub(CheckWC)

'Check to See if Running?
'If NOT Running, then End
f.Intrinsic.Control.CallSub(isRunning)

'post scan hook, then check for J	
f.Intrinsic.Control.If(v.Caller.Hook,=,15755)
	'check to make sure it is J, this means it was a JOB Scann, NOT EMployee
	f.Intrinsic.Control.If(v.Passed.global.Trim,=,"J")
		'go ahead and reset the job stream global variable back to blank. 
	
		'Check Employee Right here
		
	
		'open com port connection to communicate w/PLC
		f.Intrinsic.Control.CallSub(OpenComPort)
		
		'write PLC command files for current gui
		f.Intrinsic.Control.CallSub(WriteCommandFiles)
		
		'Show screen
		f.Intrinsic.Control.If(v.Global.bIsRunning,=,False)
			f.Intrinsic.File.Exists(v.Global.sStopFile,v.Local.bExists)
			f.Intrinsic.Control.If(v.Local.bExists,=,True)
				f.Intrinsic.File.DeleteFile(v.Global.sStopFile)
			f.Intrinsic.Control.EndIf
			
			
	
			'DO an inital check before showing screen.
			f.Intrinsic.Control.CallSub(CheckCommandFiles)
			gui.SS_Form1..Position(0,0)
			gui.SS_Form1..Show
			
'			f.Intrinsic.Control.If(v.Caller.Terminal,=,0796)
				f.Intrinsic.Control.Try
					gui.SS_Form1..SetMonitor(1)
					f.Intrinsic.Control.If(v.Screen.SS_Form1.SCREENISPRIMARY,=,true)
						gui.SS_Form1..SetMonitor(0)
					f.Intrinsic.Control.EndIf
				f.Intrinsic.Control.Catch
					gui.SS_Form1..SetMonitor(0)
				f.Intrinsic.Control.EndTry
				
	
'			f.Intrinsic.Control.EndIf
				
'			gui.Form_Speed..Show
			
			'**IDLE** and check for command file(s) **IDLE**
			'write Pid file that contains windows process id
			f.Intrinsic.String.ConvertToString(v.Ambient.PID,v.Local.sData)
			f.Intrinsic.File.String2File(v.Global.sPIDFile,v.Local.sData)
			Function.Intrinsic.Debug.TimerStart("SpeedTime")
			
			f.Intrinsic.Control.Do
				'check for commands that have been written from GUI
				f.Intrinsic.Control.CallSub(CheckCommandFiles)
					
				'Get Current Count every time we loop.
				f.Communication.Serial.SendOutput("01A")
				f.Intrinsic.UI.Sleep(.25)
				f.Communication.Serial.SendOutput("002")
				f.Intrinsic.UI.Sleep(.5)
				f.Communication.Serial.GetInput(v.Local.sData)
				f.Intrinsic.Control.If(v.Local.sData.Trim,=,"")
	
					f.Intrinsic.Math.Add(.25,v.Local.iTimer,v.Local.iTimer)
					f.Intrinsic.UI.Sleep(.25)
					f.Intrinsic.Control.If(v.Local.iTimer,>,5)
						gui.SS_Form1.lbl_CurrentCount.BackColor(v.Color.Red)
						gui.SS_Form1.lbl_CurrentCount.ForeColor(v.Color.White)
						gui.SS_Form1.lbl_CurrentCount.Caption("!!!!!!")
					f.Intrinsic.Control.endif
				f.Intrinsic.Control.Else
					v.Global.iCount_Now.Set(v.Local.sData.Long)
					v.Local.iTimer.Set(0)
					f.Intrinsic.Debug.TimerElapsed("SpeedTime",v.Local.fSpdTime)
					f.Intrinsic.Control.If(v.Local.fSpdTime,>,20)
						f.Intrinsic.Debug.TimerStart("SpeedTime")
						f.Intrinsic.Math.Sub(v.Global.iCount_Now,v.Global.iCount_Then,v.Local.iret)
						f.Intrinsic.Math.Div(60,v.Local.fSpdTime,v.Local.fSpdTime)
						f.Intrinsic.Math.Mult(v.Local.fSpdTime,v.Local.iRet,v.Local.fSpd)
						f.Intrinsic.Math.round(v.Local.fSpd,0,v.Local.fSpd)
						f.Intrinsic.String.Build("update gcg_4407_press_Spd set LFM_SPEED = {0} where TERMINAL_WC = {1}",v.Local.fSpd,v.Caller.Terminal,v.Local.sSql)
						f.ODBC.Connection!conx.execute(v.Local.sSql)
						v.Global.iCount_Then.Set(v.Global.iCount_Now)
					f.Intrinsic.Control.EndIf
					gui.SS_Form1.lbl_CurrentCount.BackColor(v.Color.White)
					gui.SS_Form1.lbl_CurrentCount.ForeColor(v.Color.Black)
					
					gui.SS_Form1.lbl_CurrentCount.Caption(v.Local.sdata)
					'update current count on current REC_ID in GCG_4407_PRESS_COUNT
					f.Intrinsic.String.Build("update gcg_4407_press_count set STOP_COUNT = {0} where REC_ID = {1}",v.Local.sData.Long,v.Global.iID,v.Local.sSql)
					f.ODBC.Connection!conx.Execute(v.Local.sSql)
					'set the total footage for job
					f.Intrinsic.Math.Add(v.Global.fTotalFTG,v.Local.sData.Float,v.Local.fTotalFTG)
					gui.SS_Form1.lbl_Total.Text(v.Local.fTotalFTG.String)
					f.Intrinsic.Math.sub(v.global.fissued,v.Local.fTotalFTG,v.local.fIssued)
					f.Intrinsic.Control.If(v.Local.fIssued,>,0)
						gui.SS_Form1.lbl_return.text(v.Local.fIssued.string)
					f.Intrinsic.Control.Else
						gui.SS_Form1.lbl_return.text(v.Local.fIssued.string)
					f.Intrinsic.Control.EndIf
					
					
					
					'get Minute difference from original start to now
					f.Intrinsic.Date.DateDiff("N",v.Global.dStart,v.Ambient.Now,v.Local.iRet)
					
					'calculate Avg linear feet per minute
					f.Intrinsic.Control.If(v.Local.iRet,<>,0)
					f.Intrinsic.Control.AndIf(v.Local.sData.Long,<>,0)
						f.Intrinsic.Math.Div(v.Local.sData.Long,v.Local.iRet,v.Local.iSpd)
						'udpate Press Speed
						f.Intrinsic.String.Build("select * from GCG_4407_PRESS_SPD where TERMINAL_WC = '{0}'",v.Caller.Terminal,v.Local.sSql)
						
						f.ODBC.Connection!conx.openrecordsetRW("rstSpd",v.Local.sSql)
						f.Intrinsic.Control.if(v.ODBC.conx!rstSpd.EOF,=,true)
							f.ODBC.conx!rstSpd.AddNew
							f.ODBC.conx!rstSpd.Set!TERMINAL_WC(v.Caller.Terminal)
						f.Intrinsic.Control.EndIf
						f.ODBC.conx!rstSpd.Set!WORKCENTER(v.Global.sWC)
						f.ODBC.conx!rstSpd.Set!LFM_AVG(v.Local.iSpd)
						f.ODBC.conx!rstSpd.Update
						f.ODBC.conx!rstSpd.Close
						f.Intrinsic.String.Build("update gcg_4407_press_count set AVG_SPEED = {0} where REC_ID = {1}",v.Local.iSpd,v.Global.iID,v.Local.sSql)
						f.ODBC.Connection!conx.Execute(v.Local.sSql)
					f.Intrinsic.Control.EndIf
					
					
					
					
				f.Intrinsic.Control.EndIf 
			f.Intrinsic.Control.Loop	
		'end program	
		f.Intrinsic.Control.Else
			'end program after writing command files if another instance is already running
			f.Intrinsic.Control.End
	
		f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

'UPDATE PIECES from GUI
'If Update Job
f.Intrinsic.Control.If(v.Caller.Hook,=,15840)

	f.Intrinsic.Control.If(v.Global.bIsRunning,=,False)
		'Counter is NOT running. 
		
		f.Intrinsic.UI.Msgbox("Counter is Not Running, Pieces NOT Calculated.")
		f.Intrinsic.Control.End

	f.Intrinsic.Control.EndIf
	'Calculate Good Pieces by getting current linear feet and multiplying by Units from Job_operations
	'where LMO = M, and OPERATION = 'LF/M'
	f.Intrinsic.Control.CallSub(CalculateGoodPieces)
f.Intrinsic.Control.EndIf

Program.Sub.Main.End

Program.Sub.SS_Form1_UnLoad.Start
'f.Intrinsic.Control.End

'do not let them end the program from this one, they have to update pieces in order to stop the process.

Program.Sub.SS_Form1_UnLoad.End

Program.Sub.SS_Form1_Resize.Start
Program.Sub.SS_Form1_Resize.End

Program.Sub.WriteCommandFiles.Start
F.Intrinsic.Control.SetErrorHandler("WriteCommandFiles_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sCmd.Declare(String)


'if we made it this file then write command to start job
f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}",v.Global.sJob,v.Global.sSuff,v.Global.sSeq,v.Global.sWC,v.Global.sEmp,v.Local.sCmd)

'write command file
f.Intrinsic.File.String2File(v.Global.sStartFile,v.Local.sCmd)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("WriteCommandFiles_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.WriteCommandFiles.End

Program.Sub.isRunning.Start
F.Intrinsic.Control.SetErrorHandler("isRunning_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.bStatus.Declare(Boolean)
v.Local.iPid.Declare(String)
v.Local.sPid.Declare(String)
v.Local.iRet.Declare(Long)

'Check for Process ID in Windows to see if the program is running already in **IDLE** and processing command files
f.Intrinsic.File.Exists(v.Global.sPIDFile,v.Local.bStatus)
f.Intrinsic.Control.If(v.Local.bStatus,=,True)
	
	
	f.Intrinsic.File.File2String(v.Global.sPIDFile,v.Local.sPid)
	f.Intrinsic.String.StripCharacters(v.Local.sPid,v.Local.sPid)
	f.Intrinsic.Task.PIDRunning(v.Local.sPid.Long,v.Global.bIsRunning)
f.Intrinsic.Control.EndIf

'checks different variables before continuing
f.Intrinsic.Control.If(v.Global.bIsRunning,=,True)
	'Check Employee to see if same user
	f.Intrinsic.Control.CallSub(checkEmployee)
	
	'Leave Jobs Hook Pre: if this is called, ask if they want to stop counter.
	F.Intrinsic.Control.If(v.Caller.Hook,=,15820)
'		f.Intrinsic.Control.If(v.Caller.Terminal,=,0796)
'			Function.Intrinsic.Debug.InvokeDebugger
'			Function.Intrinsic.Debug.Stop
'	
'		f.Intrinsic.Control.EndIf
		f.Intrinsic.UI.Msgbox("Stop Press Counter?","Stop Press Counter?",4,v.Local.iRet)
		f.Intrinsic.Control.If(v.Local.iRet,=,6)
			'Terminate Process for Counter.
			f.Intrinsic.Task.TerminatePID(v.Local.sPid.Long)
		f.Intrinsic.Control.Else
			v.Passed.777777.Set(1)
			f.Intrinsic.Control.End

		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("isRunning_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.isRunning.End

Program.Sub.CalculateGoodPieces.Start
F.Intrinsic.Control.SetErrorHandler("CalculateGoodPieces_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.bExists.Declare(Boolean)
v.Local.sRet.Declare(String)
v.Local.sTemp.Declare(String)
v.Local.iRet.Declare(Long)
v.Local.sSql.Declare(String)
v.Local.iTimer.Declare(Float)


f.Intrinsic.Control.AddEventHandler("IPMAnswer","IPMAnser")

F.Intrinsic.UI.InvokeWaitDialog("Stopping Press Counter...")

f.Intrinsic.File.String2File(v.Global.sStopFile,"Stop")

'Delete any answer file from last instance.
f.Intrinsic.File.Exists(v.Global.sAnswerFile,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,True)
	f.Intrinsic.File.DeleteFile(v.Global.sAnswerFile)
f.Intrinsic.Control.EndIf

v.Local.bExists.Set(false)

'Check for Answer file. loop for a while and ask user if they want to continue waiting.
f.Intrinsic.Control.DoUntil(v.Local.bExists,=,True)
	f.Intrinsic.Control.If(v.Local.iTimer,=,20)
		f.Intrinsic.UI.Msgbox("Counter NOT Responding. Try Again?","Not Responding",4,v.Local.iRet)
		f.Intrinsic.Control.If(v.Local.iRet,<>,6)
			f.Intrinsic.Control.End

		f.Intrinsic.Control.Else
			'counter Reset, try again.
			v.Local.iTimer.Set(0)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	'Check and Keep track of time.
	f.Intrinsic.File.Exists(v.Global.sAnswerFile,v.Local.bExists)
	f.Intrinsic.UI.Sleep(.25)
	f.Intrinsic.Math.Add(v.Local.iTimer,.25,v.Local.iTimer)	
f.Intrinsic.Control.Loop
'f.Intrinsic.Control.If(v.Caller.Terminal,=,0796)
'	Function.Intrinsic.Debug.InvokeDebugger
'	Function.Intrinsic.Debug.Stop
'	
'f.Intrinsic.Control.EndIf
'Get the current data file
f.Intrinsic.File.Exists(v.Global.sCurrentDataFile,v.Local.bExists)
F.Intrinsic.Control.If(v.Local.bExists,=,True)
	f.Intrinsic.File.File2String(v.Global.sCurrentDataFile,v.Local.sTemp)
	f.Intrinsic.String.Split(v.Local.sTemp,"*!*",v.Local.sTemp)
	
	'Get the Qty to Make 1 from Operations
	f.Intrinsic.String.Build("Select * from v_JOB_OPERATIONS where JOB = '{0}' and Suffix = '{1}' and LMO = 'M' and Operation like 'LF/%' ",v.Local.sTemp(0).Trim,v.Local.sTemp(1).Trim,v.Local.sSql)
	f.ODBC.Connection!conx.OpenRecordsetRO("rst",v.Local.sSql)
	f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,<>,true)
		'Good Pieces = Linear Feet Count * Qty to Make 1 from Raw Material Sequence based on criteria in the select statement. 
		f.Intrinsic.Math.Div(v.Local.sTemp(5).Long,v.ODBC.conx!rst.FieldVal!UNITS,v.Local.iRet)
		v.Passed.000001.Set(v.Local.iRet)
		
		'update Stop Count
		f.Intrinsic.String.Build("Select * from GCG_4407_PRESS_COUNT where REC_ID = '{0}' ",v.Local.sTemp(6).Long,v.Local.sSql)
		f.ODBC.Connection!conx.OpenRecordsetRW("rst2",v.Local.sSql)
		f.Intrinsic.Control.If(v.ODBC.conx!rst2.EOF,<>,True)
			f.ODBC.conx!rst2.Set!STOP_COUNT(v.Local.sTemp(5).Long)
			f.ODBC.conx!rst2.Update
		f.Intrinsic.Control.EndIf
		f.ODBC.conx!rst2.Close
		
		f.Intrinsic.UI.Sleep(.5)
		f.Intrinsic.File.Exists(v.Global.sStopFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,True)
			f.Intrinsic.File.DeleteFile(v.Global.sStopFile)
		F.Intrinsic.Control.EndIf
		
		f.Intrinsic.File.Exists(v.Global.sCurrentDataFile,v.Local.bExists)
		f.Intrinsic.Control.If(v.Local.bExists,=,True)
			f.Intrinsic.File.DeleteFile(v.Global.sCurrentDataFile)
		f.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.EndIf
	f.ODBC.conx!rst.Close
	
f.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("CalculateGoodPieces_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.CalculateGoodPieces.End

Program.Sub.CheckCommandFiles.Start
F.Intrinsic.Control.SetErrorHandler("CheckCommandFiles_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sCmd.Declare(String)
v.Local.sCurrData.Declare(String)
v.Local.bExists.Declare(Boolean)
v.Local.iRet.Declare(Long)
v.Local.iID.Declare(Long)
v.Local.ssql.Declare(String)


'Check for Material Issue Total each time. 
f.Intrinsic.String.Build("Select sum(Hours_Actual) as Hours_Actual, sum(Hours_Estimated) as Hours_Est from v_JOB_OPERATIONS where JOB = '{0}' and SUFFIX = '{1}' and Part = '{2}' ",v.Global.sJob,v.Global.sSuff,v.Global.sRM_Part,v.Local.ssql)
f.ODBC.Connection!conx.OpenRecordsetRO("rstFt",v.Local.ssql)
f.Intrinsic.Control.If(v.ODBC.conx!rstFt.EOF,<>,true)
	gui.SS_Form1.lbl_Issued.Text(v.ODBC.conx!rstFt.FieldVal!Hours_Actual)
	v.Global.fissued.Set(v.ODBC.conx!rstFt.FieldValFloat!Hours_Actual)
	gui.SS_Form1.lbl_Footage.Text(v.ODBC.conx!rstFt.FieldVal!Hours_Est)
Function.Intrinsic.Control.EndIf
f.ODBC.conx!rstFt.Close

'Only continue if Start Count Exists
'f.Intrinsic.Control.If(v.Global.bStarted,<>,True)
	f.Intrinsic.File.Exists(v.Global.sStartFile,v.Local.bExists)
	f.Intrinsic.Control.If(v.Local.bExists,=,True)	
		'send commands to PLC
		'Reset
		f.Communication.Serial.SendOutput("01C")
		f.Intrinsic.UI.Sleep(.5)
		f.Communication.Serial.SendOutput("02C")
		f.Intrinsic.UI.Sleep(.5)
		'Start
		f.Communication.Serial.SendOutput("01A")
		f.Intrinsic.UI.Sleep(.5)
		f.Communication.Serial.SendOutput("02A")
		
		'when starting Job, we need to reset count, then start. 
		F.Intrinsic.File.File2String(v.Global.sStartFile,v.Local.sCmd)
		
		'UPDATE TABLE FOR REPORTING
		F.ODBC.Connection!conx.OpenRecordsetRW("rst","Select * from GCG_4407_PRESS_COUNT")
		f.ODBC.conx!rst.AddNew
		f.ODBC.Connection!conx.getID("GCG_4407_PRESS_COUNT","REC_ID",True,v.Local.iID)
		f.ODBC.conx!rst.Set!REC_ID(v.Local.iID)
		f.ODBC.conx!rst.Set!JOB(v.Global.sJob)
		f.ODBC.conx!rst.Set!SUFFIX(v.Global.sSuff)
		f.ODBC.conx!rst.Set!SEQ(v.Global.sSeq)
		f.ODBC.conx!rst.Set!WORKCENTER(v.Global.sWC)
		f.ODBC.conx!rst.Set!EMPLOYEE(v.Global.sEmp)
		f.ODBC.conx!rst.Set!START_DATE(V.Ambient.Now)
		v.global.dStart.Set(v.Ambient.now)
		f.ODBC.conx!rst.Set!START_COUNT(0)
		f.ODBC.conx!rst.Set!STOP_COUNT(0)
		f.ODBC.conx!rst.Set!AVG_SPEED(0)
		F.ODBC.conx!rst.Update
		F.ODBC.conx!rst.Close
		
		'Write data for current data, adding current qty, set to 0 since we are STARTing at job
		f.Intrinsic.String.Build("{0}*!*0*!*{1}",v.Local.sCmd,v.Local.iID.String,v.Local.sCurrData)
		
		'Write updated current data file
		f.Intrinsic.File.String2File(V.Global.sCurrentDataFile,v.Local.sCurrData)
		
		'update global variables
		f.Intrinsic.String.Split(v.Local.sCmd,"*!*",v.Local.sCmd)
		v.Global.sJob.Set(v.Local.sCmd(0).Trim)
		v.Global.sSuff.Set(v.Local.sCmd(1).Trim)
		v.Global.sSeq.Set(v.Local.sCmd(2).Trim)
		v.Global.sWC.Set(v.Local.sCmd(3).Trim)
		v.Global.sEmp.Set(v.Local.sCmd(4).Trim)
		v.Global.iID.Set(v.Local.iID)
		
		F.Intrinsic.String.Build("{0} - {1} - {2}",v.Global.sJob,v.Global.sSuff,v.Global.sSeq,v.Local.sCurrData)
		gui.SS_Form1.lbl_JobInfo.Caption(v.Local.sCurrData.Trim)
		
	
		'command finished processing, delete
		f.Intrinsic.File.DeleteFile(v.Global.sStartFile)
'		v.Global.bStarted.Set(True)
	f.Intrinsic.Control.EndIf
'f.Intrinsic.Control.EndIf

'if Stop Count Exists, Update Pieces Hook was Fired.
f.Intrinsic.File.Exists(v.Global.sStopFile,v.Local.bExists)
f.Intrinsic.Control.If(v.Local.bExists,=,True)
	v.Local.sCmd.Set("")
	'Stop count, then get current count and close program.
	
	f.Communication.Serial.SendOutput("01A")
	f.Intrinsic.UI.Sleep(.25)
	f.Communication.Serial.SendOutput("002")
	f.Intrinsic.UI.Sleep(.5)
	f.Communication.Serial.GetInput(v.Local.sCmd)
	f.Intrinsic.Control.If(v.Local.sCmd.Long,=,0,"AND",V.GLOBAL.iCount_Now,>,0)
		v.Local.sCmd.set(v.Global.iCount_Now.String)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}*!*{4}*!*{5}*!*{6}",v.Global.sJob,v.Global.sSuff,v.Global.sSeq,v.Global.sWC,v.Global.sEmp,v.Local.sCmd.Long,v.Global.iID,v.Local.sCmd)
	f.Intrinsic.File.String2File(v.Global.sCurrentDataFile,v.Local.sCmd)		
	'Write other answer file that lets them know other program instance answered.
	f.Intrinsic.File.String2File(v.Global.sAnswerFile,"Yes")
	'Delete Files that will interfere.
	f.Intrinsic.File.Exists(v.Global.sPIDFile,v.Local.bExists)
	f.Intrinsic.File.DeleteFile(v.Global.sPIDFile)
	f.Intrinsic.File.DeleteFile(v.Global.sStopFile)
	'End
	f.Intrinsic.Control.End	
		

	f.Intrinsic.File.DeleteFile(v.Global.sStopFile)
	
f.Intrinsic.Control.EndIf

gui.SS_Form1..AlwaysOnTop(False)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("CheckCommandFiles_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.CheckCommandFiles.End

Program.Sub.CheckCurrentData.Start
F.Intrinsic.Control.SetErrorHandler("CheckCurrentData_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sCurrJob.Declare(String)
v.Local.bExists.Declare(Boolean)
v.Local.sSql.Declare(String)

''get the file contents that are being written if program is in **IDLE** mode
'f.Intrinsic.File.Exists(v.Global.sCurrentDataFile,v.Local.bExists)
'
'f.Intrinsic.Control.If(v.Local.bExists,=,True)
'	'check job in process for current data that is in the current command file that exists, if in process on this terminal, then notify user if differnt job
'	f.Intrinsic.File.File2String(v.Global.sCurrentDataFile,v.Local.sCurrJob)
'	'check to see if current job is running in JOBS in PROCESS GUI
'	f.Intrinsic.String.Split(v.Local.sCurrJob,"*!*",v.Local.sCurrJob)
'	f.Intrinsic.String.Build("Select * from JOBS_IN_PROCESS_G where Job = '{0}' and suffix = '{1}' and Seq = '{2}' and WORKCENTER = '{3}' and EMPLOYEE = '{4}' ",v.Local.sCurrJob(0).Trim,v.Local.sCurrJob(1).Trim,v.Local.sCurrJob(2).Trim,v.Local.sCurrJob(3).Trim,v.Local.sCurrJob(4).Trim,v.Local.sSql)
'	f.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",v.Local.sSql)
'	f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,<>,true)
'		'Notify User, end program
'		f.Intrinsic.String.Build("You are still Scanned into Job# {0}-{1} @ this Press, UPDATE Pieces before starting new job!",v.Local.sCurrJob(0),v.Local.sCurrJob(1),v.Local.sSql)
'		f.Intrinsic.UI.Msgbox(v.Local.sSql)
'		f.Intrinsic.Control.End

'
'	f.Intrinsic.Control.EndIf
'	f.ODBC.conx!rst.Close
'
'f.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("CheckCurrentData_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.CheckCurrentData.End

Program.Sub.SetFQPs.Start
'Files that will be processed by current terminal instance of this program running.

'Command Files
'Start Count: \\server\global\files\WC_cccttt.Start
'File Contains: JOB*!*SUFFIX*!*SEQUENCE*!*WC*!*EMPLOYEE
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Start",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sStartFile)

'Current Data: \\server\global\files\WC_cccttt.Current
'File Contains: JOB*!*SUFFIX*!*SEQUENCE*!*WC*!*EMPLOYEE*!*CURRENT_COUNT(linear Feet)
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Current",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sCurrentDataFile)

'file that holds Com Port ID for this terminal Windows Device Manager>Com Ports>"COM1" = 1. so this file would contain the #1.(used for serial commands)
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Cid",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sComPortFile)

'PID File
'File Contains: Process Id from Windows Task Manager>Processes
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Pid",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sPIDFile)

'Answer File
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Answer",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sAnswerFile)

'reset file, simply reset count
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Reset",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sResetFile)

'stop count, just stop the counter
f.Intrinsic.String.Build("{0}\{1}_{2}{3}.Stop",v.Caller.FilesDir,v.Global.sWC.Trim,v.Caller.CompanyCode,v.Caller.Terminal,v.Global.sStopFile)

Program.Sub.SetFQPs.End

Program.Sub.OpenComPort.Start
v.Local.sFile.Declare(string)
v.Local.bExists.Declare(Boolean)
v.Local.ssql.Declare(String)
v.Local.bState.Declare(Boolean)
v.Local.iRet.Declare(Long)
v.Local.i.Declare(Long)

'Get Comport ID from TAble containing WC and Comport ID from Device Manager>comports>"com1" so the record will have "1" in the table.
f.Intrinsic.String.Build("Select * from GCG_4407_PRESS_CFG where PRESS_ID = '{0}'",v.Global.sWC.Trim,v.Local.ssql)
f.ODBC.Connection!conx.OpenRecordsetRO("rst",v.Local.ssql)
f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,<>,true)
	v.Global.iCommID.Set(v.ODBC.conx!rst.FieldValLong!COMPORT_ID)
	
f.Intrinsic.Control.EndIf
f.ODBC.conx!rst.Close

'George Sandoval 14 March 2022 - error this event does not exist.
'F.Intrinsic.Control.AddEventHandler("COMMONCOMM",DR)
F.Communication.Serial.SetCOMPort(v.Global.iCommID)
F.Communication.serial.SetParameters("9600,O,8,1")
F.Communication.Serial.SetRTSEnable(True)

'check the port status, then after 10 Seconds, Try again?
f.Intrinsic.control.DoUntil(v.Local.bState,=,true)
	f.Intrinsic.Control.Try
		F.Communication.Serial.OpenPort(True)
		v.Local.bState.Set(True)
	f.Intrinsic.Control.catch
		v.Local.bState.Set(False)
		f.Intrinsic.UI.Sleep(1)
		f.Intrinsic.Math.Add(v.Local.i,1,v.Local.i)
		'if 10 seconds then prompt the user.
		f.Intrinsic.Control.If(v.Local.i,=,10)
			f.Intrinsic.UI.Msgbox("Check Counter Connection, Try Again?","Check Counter Connection",4,v.Local.iRet)
			f.Intrinsic.Control.If(v.Local.iRet,=,6)
				v.Local.i.Set(0)
			f.Intrinsic.Control.Else
				f.Intrinsic.Control.End
			f.Intrinsic.Control.EndIf
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.endtry
f.Intrinsic.Control.Loop


Program.Sub.OpenComPort.End

Program.Sub.IPMAnswer.Start
	f.Intrinsic.UI.Beep
	'test Message
	f.Intrinsic.UI.InvokeWaitDialog(v.Args.message)
	f.Intrinsic.UI.Sleep(1)
	f.Intrinsic.UI.CloseWaitDialog
	
	
Program.Sub.IPMAnswer.End

Program.Sub.SetPassedVars.Start
F.Intrinsic.Control.SetErrorHandler("SetPassedVars_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.ssql.Declare(String)
v.Local.fFootage.Declare(float)
v.Local.sTemp.Declare(String)


'Only get passed information if on Start Job(Scan), or Update Pieces
v.Global.sJob.Set(v.Passed.009990)
v.Global.sSuff.Set(v.Passed.009991)
v.Global.sSeq.Set(v.Passed.009992)
f.Intrinsic.Control.If(v.Caller.Hook,=,15820)
	v.Global.sSeq.Set(v.Passed.009001)
f.Intrinsic.Control.EndIf
v.Global.sEmp.Set(v.Passed.009993)
'	v.Global.sWC.Set(v.Passed.009996)
'instead of using passed wc, need to query jobs in process to get the correct one, based on employee, job, suffix, sequence. 
f.Intrinsic.String.Build("Select * from JOBS_IN_PROCESS_G where JOB = '{0}' and suffix = '{1}' and Seq = '{2}' and Employee = '{3}'",v.Global.sJob,v.Global.sSuff,v.Global.sSeq,v.Global.sEmp,v.Local.ssql)
f.ODBC.Connection!conx.OpenRecordsetRO("rstWC",v.Local.ssql)
f.Intrinsic.Control.If(v.ODBC.conx!rstWC.EOF,<>,true)
	v.Global.sWC.Set(v.ODBC.conx!rstWC.FieldValTrim!WORKCENTER)
f.Intrinsic.Control.EndIf
f.ODBC.conx!rstWC.Close

'Write Estimated Footage to Lbl_wo (run qty * units)
f.Intrinsic.String.Build("Select Part,Hours_actual,Units from v_JOB_OPERATIONS where JOB = '{0}' and SUFFIX = '{1}' and LMO = 'M' and OPERATION like 'LF/%' ",v.Global.sJob,v.Global.sSuff,v.Local.ssql)
f.ODBC.Connection!conx.OpenRecordsetRO("rstFt",v.Local.ssql)
f.Intrinsic.Control.If(v.ODBC.conx!rstFt.EOF,<>,true)
	v.Global.sRM_Part.Set(v.ODBC.conx!rstFt.FieldValTrim!Part)
	
	'Get Sum of estimated and actual material issued from JOB_OPERATIONS
	f.Intrinsic.String.Build("Select Sum(Hours_Estimated) as HOURS_EST,SUM(HOURS_ACTUAL) as HOURS_ACT from v_JOB_OPERATIONS where JOB = '{0}' and Suffix = '{1}' and PART = '{2}'",v.Global.sJob,v.Global.sSuff,v.ODBC.conx!rstFt.FieldVal!PART,v.Local.ssql)
	f.ODBC.Connection!conx.OpenRecordsetRO("rstSum",v.Local.ssql)
	f.Intrinsic.Control.If(v.ODBC.conx!rstSum.EOF,<>,true)
		'set to local then convert to string, this was erroring out when I was passing a numeric value from DB to screen directly.
			
		v.Local.fFootage.Set(v.ODBC.conx!rstSum.FieldValFloat!HOURS_EST)
		gui.SS_Form1.lbl_Footage.Text(v.Local.fFootage.String)
		
		v.Local.fFootage.Set(v.ODBC.conx!rstSum.FieldValFloat!HOURS_ACT)
		gui.SS_Form1.lbl_Issued.Text(v.Local.fFootage.String)
		
	f.Intrinsic.Control.EndIf
	f.ODBC.conx!rstSum.Close
		
	'Add to existing Records to get total footage for job & suffix, this accounts for setup and run sequences on the job. DLS Splits setup out into its own labor sequence.
	f.Intrinsic.String.Build("Select sum(stop_count) as TOTAL_FTG from GCG_4407_PRESS_COUNT where JOB = '{0}' and Suffix = '{1}'",v.Global.sJob,v.Global.sSuff,v.Global.sSeq,v.Local.ssql)
	f.ODBC.Connection!conx.OpenRecordsetRO("rstSum",v.Local.ssql)
	f.Intrinsic.Control.If(V.ODBC.conx!rstSum.EOF,<>,true)
		'display on label and store global variable that will be used as count increases.
		v.Global.fTotalFTG.Set(v.ODBC.conx!rstSum.FieldVal!TOTAL_FTG)
		gui.SS_Form1.lbl_Total.Text(v.Global.fTotalFTG.String)
	f.Intrinsic.Control.EndIf
	f.ODBC.conx!rstSum.Close

f.Intrinsic.Control.EndIf
f.ODBC.conx!rstFt.Close

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SetPassedVars_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.SetPassedVars.End

Program.Sub.CheckWC.Start
F.Intrinsic.Control.SetErrorHandler("CheckWC_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
v.Local.sSql.Declare(String)
v.Local.bRet.Declare(String)

'if it is in table and Description contains "PRESS"
f.Intrinsic.String.Build("Select * from GCG_4407_PRESS_CFG where PRESS_ID = '{0}'",v.Global.sWC.Trim,v.Local.sSql)
f.ODBC.Connection!conx.OpenRecordsetRO("rst",v.Local.sSql)
f.Intrinsic.Control.If(v.ODBC.conx!rst.EOF,=,true)
	f.ODBC.conx!rst.Close
	f.Intrinsic.Control.End

f.Intrinsic.Control.EndIf
f.ODBC.conx!rst.Close



F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("CheckWC_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.CheckWC.End

Program.Sub.checkEmployee.Start
F.Intrinsic.Control.SetErrorHandler("checkEmployee_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

v.Local.sSql.Declare(String)
v.Local.sTemp.Declare(String)

'if the employee does not match the employee in the Current Data file, End program,
'the other user logging into the same WC in this scenario is a helper.
f.Intrinsic.File.File2String(v.Global.sCurrentDataFile,v.Local.sTemp)
f.Intrinsic.String.Split(v.Local.sTemp,"*!*",v.Local.sTemp)
f.Intrinsic.Control.If(v.Local.sTemp.UBound,<>,0)
	f.Intrinsic.Control.If(v.Global.sEmp.Trim,<>,v.Local.sTemp(4).Trim)
		f.Intrinsic.Control.End

	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
			



F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("checkEmployee_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4407_PRESS_COUNTER.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.checkEmployee.End

Program.Sub.UpdateCount.Start
F.Intrinsic.Control.SetErrorHandler("Sub_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

v.Local.bCheck.Declare(Boolean)

f.Intrinsic.Variable.ArgExists("count",v.Local.bCheck)
f.Intrinsic.Control.If(v.Local.bCheck,=,true)
	'update count
	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Sub_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: Project",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf

Program.Sub.UpdateCount.End

Program.Sub.Form_Speed_UnLoad.Start
f.Intrinsic.Control.End
Program.Sub.Form_Speed_UnLoad.End

Program.Sub.Form_Speed_Resize.Start
Program.Sub.Form_Speed_Resize.End

Program.Sub.timer1_Timer.Start
'update global.iCount_Then
v.Local.fRet.Declare(Float)
v.Local.sSql.Declare(String)
f.Intrinsic.String.Build("Select LFM_SPEED from GCG_4407_PRESS_SPD where TERMINAL_WC = '{0}'",v.Caller.Terminal,v.Local.sSql)
f.ODBC.Connection!conx.executeandreturn(v.Local.sSql,v.Local.fRet)
f.Intrinsic.String.Format(v.Local.fRet,"####",v.Local.fRet)
gui.SS_Form1.lblCurrent.Caption(v.Local.fRet.String)




Program.Sub.timer1_Timer.End

Program.Sub.Comments.Start
${$0$}$GCG_4407_PRESS_COUNTER.g2u.ga$}$SUPERVSR$}$2/7/2017 10:45:35 AM$}$False
${$3$}$0$}$$}$-1$}$-1$}$$}$1/1/1900$}$SN90 transaction loads GSS Inventory into Sigma Nest
Program.Sub.Comments.End

Program.Sub.ScreenSS.Start
SS_Form1{{CAPTION::Press Counter
SS_Form1.CTRL{{NAME::lbl_JobInfo\\TYPE::1\\CAPTION::Job - Suffix - Sequence\\TABSTOP::0\\GROUP::-1\\BROWSER::0\\SIZE::1
SS_Form1.CTRL{{NAME::lbl_CurrentCount\\TYPE::1\\CAPTION::000000\\TABSTOP::0\\GROUP::-1\\BROWSER::0\\SIZE::1
SS_Form1.CTRL{{NAME::cmdOk\\TYPE::5\\CAPTION::Ok\\TABSTOP::0\\GROUP::-1\\BROWSER::0\\SIZE::1

SS_Form2{{CAPTION::Select Com Port
SS_Form2.CTRL{{NAME::txtComPort\\TYPE::2\\CAPTION::Enter Com Port# and Press Enter\\GROUP::-1\\BROWSER::0\\SIZE::1

Program.Sub.ScreenSS.End
